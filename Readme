Here is code and support materials of paper 'Generative Models Improve Radiomics Performance in Different Tasks and
Different Datasets: An Experimental Study', this paper high related with our pervious papers 'Generative models
improve radiomics reproducibility in low dose CTs: a simulation study'(https://iopscience.iop.org/article/10.1088/1361-6560/ac16c0) 
and paper 'Lung Cancer Diagnosis Using Deep Attention Based on Multiple Instance Learning and Radiomics' (https://arxiv.org/abs/2104.14655).
Reading our pervious papers and related codes in advance can help you to understand this paper and code better.

Repositorys of ENDs and CGAN Radiomics features and an Example of TFrecord stored data for deep attention based 
multiple instance learning (MIL) problem, moreover, files maketfrecord.py and MILnetwork.py are used in MIL problem.

In the Repository of ENDs Radiomics features and an Example of TFrecord, you can find the summary of radiomics
features calculated from encoder-decoder network (trained at 100 epochs) denoised LIDC-IDRI dataset 
(in EDNsummary.xlsx file), summary of normalized radiomics (in EDNnormalizedsummary.xlsx file) and summary of 
simulation neagtive bags (in ENDsimulationNegativeSummary.xlsx file) and an example of generated MIL training and 
testing TFrecord.

In the Repository of CGAN Radiomics features and an Example of TFrecord, you can find the summary of radiomics
features calculated from CGAN (Trained at 100 epochs) denoised LIDC-IDRI dataset (in CGAN summary.xlsx file), 
summary of normalized radiomics (in CGAN normalizedsummary.xlsx file) and summary of simulation neagtive bags (in
CGAN simulationNegativeSummary.xlsx file) and an example of generated MIL training and testing TFrecord.

You can use maketfrecord.py to create a new training and testing TFrecord by using normalizedsummary.xlsx and 
simulationNegativeSummary.xlsx file as mentioned above.

You can use MILnetwork.py to run proposed method and validate our results.

In the Repository Radiomics features of survival prediction task stored radiomics features for survival prediction 
task, and Nested cross validation.py used to calculate the AUC of prediction task.
